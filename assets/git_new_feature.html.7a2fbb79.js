import{_ as e}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as t,c as d,e as i}from"./app.4e24359e.js";const c={},a=i(`<h3 id="git新功能-switch、restore" tabindex="-1"><a class="header-anchor" href="#git新功能-switch、restore" aria-hidden="true">#</a> Git新功能：switch、restore</h3><p>这篇文章将介绍<code>git restore</code>和<code>git switch</code>两个命令。 想要了解为什么新增了<code>git restore</code>和<code>git switch</code>命令，需先介绍下<code>git checkout</code>命令。旧的checkout命令仍然可用</p><h3 id="git-checkout-的负担" tabindex="-1"><a class="header-anchor" href="#git-checkout-的负担" aria-hidden="true">#</a> git checkout 的负担</h3><ul><li><p>切换分支</p><p><code>git checkout</code>的功能根据上下文决定，这一点经常让新手感到疑惑。<br><code>git checkout</code>经常用来切换本地分支，即切换HEAD指向的分支。例如，从main分支切换到develop分支。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git checkout develop
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>也可以让HEAD指针指向指定的提交，而非一个分支。此时，会进入分离分支状态（detached HEAD state）。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git checkout 175b4f9d037d022b81dde5bdce3b2d536b1f8dcc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>恢复文件</p><p>当为<code>git checkout</code>参数添加文件时，事情开始变得奇怪起来。它会舍弃本地修改，使用分支状态替换。<br> 例如，切换到dev分支后对test.txt文件做了一些修改，你可以使用当前分支最后提交中test.txt文件替换当前文件，即恢复到指定提交中的状态。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git checkout -- test.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查看<code>git checkout</code>文档，会发现该命令还有一个常被忽略的参数：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git checkout &lt;tree-ish&gt; -- &lt;pathspec&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>&lt;tree-ish&gt;代表很多不同的东西，但最常见的是代表提交哈希和分支名。默认为当前分支，但也可以是任意分支、任意提交。<br> 因此，当前在dev分支，想要将test.txt文件改变为main分支的版本，可以使用以下命令：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git checkout main -- test.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>总结来看，给<code>git checkout</code>命令传递分支、提交作为参数，它会把所有文件修改到指定版本状态；如果指定了文件名称，它只会修改指定文件到指定版本。</p><p>总体来说就是干的事情儿太多了，checkout的语义化也不明确，所以新增了两个小弟来分担下。</p></li></ul><h3 id="git-checkout-的分担小弟" tabindex="-1"><a class="header-anchor" href="#git-checkout-的分担小弟" aria-hidden="true">#</a> git checkout 的分担小弟</h3><ol><li>git switch</li></ol><p>虽然上面部分已经介绍了git checkout的使用细节，但确实很容易让新手产生疑惑。git 2.23版本引入了两个新的命令：<code>git switch</code>和<code>git restore</code>,<br> 每个命令只做git checkout的一部分工作。git checkout仍然可以使用，但这两个命令对新手更友好。</p><p><code>git switch</code>用来切换分支或提交。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git switch dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用<code>git checkout</code>时，可以传入提交，切换到 detached HEAD 状态。<code>git switch</code>默认不支持此操作，需提供-d标记：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git switch -d 175b4f9d037d022b81dde5bdce3b2d536b1f8dcc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>另一点不同是，使用<code>git checkout</code>把创建、切换合并到一个命令时，使用-b标记：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git checkout -b new_branch
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>用<code>git switch</code>创建并切换到新分支，使用-c标记：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git switch -c new_branch
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>git restore</li></ol><p>替代了git checkout --file(暂存区到工作区) 和 git reset HEAD file(版本库到暂存区) <code>git checkout</code>传递文件切换文件状态部分功能由<code>git restore</code>实现。使用<code>git restore</code>命令可以把文件恢复到指定状态：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git restore -- test.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果指定了 path，但 restore source 中不存在，则会移除文件以达到和指定版本一致的状态。</p><p>两种方式都可以，看大家的接受程度，目前新版本的git status 可以在未add和add内得到新的git restore的语法。</p>`,20),s=[a];function o(r,n){return t(),d("div",null,s)}const g=e(c,[["render",o],["__file","git_new_feature.html.vue"]]);export{g as default};
